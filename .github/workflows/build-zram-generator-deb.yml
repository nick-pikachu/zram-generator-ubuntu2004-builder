name: Build systemd-zram-generator .deb (Ubuntu 20.04 Target)
on:
  push:
    branches:
      - main
  workflow_dispatch: null
jobs:
  build_deb:
    name: Build .deb for Ubuntu 20.04 Target
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      options: --user root
    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
      - name: Install Core Tools (unzip, git) in Container
        run: >
          export DEBIAN_FRONTEND=noninteractive

          apt update -y

          apt install -y unzip git

          apt clean

          rm -rf /var/lib/apt/lists/*

          git config --global --add safe.directory /__w/${{ github.repository }}/${{ github.repository }}
      - name: Download systemd-zram-generator Source from Previous Build (using API)
        id: download_source
        uses: actions/github-script@v7
        with:
          script: >
            const { repos } = github.rest;

            const owner = 'systemd';

            const repo = 'systemd-zram-generator';

            const run_id = 9243760431; // *** CRITICAL: REPLACE THIS WITH A REAL workflow_run_id ***
                                    // Example: Go to https://github.com/systemd/systemd-zram-generator/actions
                                    // Pick a "CI" run, click it, and get the ID from the URL (e.g., .../runs/123456789)

            console.log(`Fetching workflow run artifacts for run_id: ${run_id}`);

            const artifacts = await repos.listWorkflowRunArtifacts({ owner, repo, run_id });


            if (!artifacts.data.artifacts || artifacts.data.artifacts.length === 0) {
              console.log('No artifacts found for this run. Setting output to indicate no download.');
              core.setOutput('artifact_downloaded', 'false');
              return;
            }


            const sourceArtifact = artifacts.data.artifacts.find(artifact => 
              artifact.name.includes('source') || artifact.name.includes('archive') || artifact.name.includes('code') || artifact.name.includes('build')
            );


            const artifactToDownload = sourceArtifact || artifacts.data.artifacts[0]; // Fallback to first if specific not found


            console.log(`Downloading artifact: ${artifactToDownload.name} (ID: ${artifactToDownload.id})`);

            const download = await repos.downloadArtifact({
              owner,
              repo,
              artifact_id: artifactToDownload.id,
              archive_format: 'zip',
            });

            core.setOutput('artifact_downloaded', 'true');
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Artifact or Fallback to Git Clone
        working-directory: ${{ github.workspace }}
        run: >
          EXTRACT_DIR="systemd-zram-generator-source" # Target directory for source

          mkdir -p "$EXTRACT_DIR" # Ensure target directory exists


          # Check if the previous step successfully downloaded an artifact

          if [ "${{ steps.download_source.outputs.artifact_downloaded }}" == "true" ]; then
            echo "Artifact ZIP should be in the workspace. Extracting..."
            DOWNLOADED_ZIP=$(find . -maxdepth 1 -name "*.zip" -print -quit) # Search in current dir (workspace root)
            if [ -z "$DOWNLOADED_ZIP" ]; then
              echo "ERROR: Downloaded artifact ZIP file not found! Aborting."
              exit 1
            fi

            unzip -o "$DOWNLOADED_ZIP" -d "$EXTRACT_DIR" # Unzip into the target directory

            # The ZIP might contain a top-level directory (e.g., systemd-zram-generator-main/), so move contents up
            EXTRACTED_SUBDIR=$(find "$EXTRACT_DIR" -maxdepth 1 -mindepth 1 -type d -print -quit)
            if [ -n "$EXTRACTED_SUBDIR" ] && [ -f "$EXTRACTED_SUBDIR/meson.build" ]; then
              echo "Moving contents from $EXTRACTED_SUBDIR to $EXTRACT_DIR..."
              mv "$EXTRACTED_SUBDIR"/* "$EXTRACT_DIR"/
              rm -rf "$EXTRACTED_SUBDIR" # Clean up original extracted subdir
            fi
            rm -f "$DOWNLOADED_ZIP" # Clean up the downloaded zip file
            echo "Source extracted from artifact."
          else
            echo "No artifact was downloaded by the previous step. Falling back to direct git clone..."
            rm -rf "$EXTRACT_DIR" || true # Clean up any previous attempts

            echo "Cloning https://github.com/systemd/systemd-zram-generator.git..."
            git clone --depth 1 https://github.com/systemd/systemd-zram-generator.git "$EXTRACT_DIR"

            if [ ! -f "$EXTRACT_DIR/meson.build" ]; then
              echo "ERROR: meson.build NOT found after fallback git clone! Critical failure."
              ls -lF "$EXTRACT_DIR" # List contents for debug
              exit 1
            fi
            echo "Source cloned via fallback Git."
          fi
      - name: Install Remaining Build Dependencies (Non-interactive)
        working-directory: ./systemd-zram-generator-source
        run: >
          export DEBIAN_FRONTEND=noninteractive

          export TZ="Etc/UTC"


          apt update -y

          apt install -y tzdata build-essential meson ninja-build pkg-config libsystemd-dev debhelper devscripts


          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime

          dpkg-reconfigure -f noninteractive tzdata


          apt clean

          rm -rf /var/lib/apt/lists/*
      - name: Debug:Final Check - List Contents of systemd-zram-generator-source
        working-directory: ./systemd-zram-generator-source
        run: |
          echo "Current working directory (pwd): $(pwd)"
          echo "Contents of ./systemd-zram-generator-source (FINAL CHECK):"
          ls -lF
          echo "Full recursive listing:"
          ls -lR . 
      - name: Configure and Build Project
        working-directory: ./systemd-zram-generator-source
        run: >
          echo "Current working directory for Meson setup: $(pwd)"

          if [ ! -f "meson.build" ]; then
            echo "ERROR: meson.build is still missing! This should not happen. Fatal error. Listing current directory contents:"
            ls -lF .
            exit 1
          fi

          meson setup . build --prefix=/usr

          ninja -C build
      - name: Create Debian Package
        working-directory: ./systemd-zram-generator-source
        run: >
          dch --create --package systemd-zram-generator --newversion
          1.0.0-${GITHUB_RUN_NUMBER} "GitHub Actions build for Ubuntu 20.04."

          dpkg-buildpackage -b -us -uc
      - name: Find .deb package
        id: find_deb
        working-directory: ${{ github.workspace }}
        run: >
          DEB_FILE=$(find . -maxdepth 1 -name "systemd-zram-generator_*.deb" -print
          -quit)

          if [ -z "$DEB_FILE" ]; then
            echo "Error: .deb file not found in root workspace! Aborting."
            exit 1
          fi

          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT
      - name: Upload Debian Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: systemd-zram-generator-ubuntu2004-deb
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
