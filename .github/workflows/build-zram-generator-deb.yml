# .github/workflows/build-zram-generator-deb.yml
name: Build systemd-zram-generator .deb (Ubuntu 20.04 Target)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_deb:
    name: Build .deb for Ubuntu 20.04 Target
    runs-on: ubuntu-latest

    container:
      image: ubuntu:20.04
      options: --user root

    steps:
      - name: Checkout systemd-zram-generator source
        uses: actions/checkout@v4
        with:
          repository: systemd/zram-generator
          path: zram-generator-source # Clones into this subdirectory

      - name: Install Build Dependencies inside Ubuntu 20.04 Container (Non-interactive)
        # All commands in this step now run inside the 'zram-generator-source' directory
        working-directory: ./zram-generator-source
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export TZ="Etc/UTC"

          apt update -y
          apt install -y tzdata build-essential git meson ninja-build pkg-config libsystemd-dev debhelper devscripts
          
          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

          apt clean
          rm -rf /var/lib/apt/lists/*

      - name: Debug: List Workspace Contents Before Build
        # This will show us exactly what's in the directory before meson runs
        working-directory: ./zram-generator-source # Still operate in the source directory
        run: |
          echo "Contents of current working directory (./zram-generator-source):"
          ls -lF
          echo "Contents of parent directory (root workspace):"
          ls -lF ../
          echo "Full recursive listing of zram-generator-source:"
          ls -lR .

      - name: Configure and Build Project
        working-directory: ./zram-generator-source # This should be correct if source is there
        run: |
          meson setup build --prefix=/usr
          ninja -C build

      - name: Create Debian Package
        working-directory: ./zram-generator-source # This should be correct
        run: |
          dch --create --package systemd-zram-generator --newversion 1.0.0-${GITHUB_RUN_NUMBER} "GitHub Actions build for Ubuntu 20.04."
          dpkg-buildpackage -b -us -uc

      - name: Find .deb package
        id: find_deb
        run: |
          # After dpkg-buildpackage, the .deb is typically generated in the parent directory
          # of where dpkg-buildpackage was invoked. Since it's run in ./zram-generator-source,
          # the .deb should be in the root of the workspace.
          # The workspace root inside a container is typically /__w/<repo_name>/<repo_name>/
          # Let's search from the expected root of the workspace.
          DEB_FILE=$(find /__w/${{ github.repository }} -maxdepth 2 -name "*.deb" -print -quit)
          if [ -z "$DEB_FILE" ]; then
            echo "Error: .deb file not found in expected paths!"
            exit 1
          fi
          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT

      - name: Upload Debian Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: systemd-zram-generator-ubuntu2004-deb
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
