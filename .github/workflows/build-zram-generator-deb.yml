# .github/workflows/build-zram-generator-deb.yml
# This workflow compiles the upstream systemd-zram-generator C project
# and packages it into a .deb file specifically for Ubuntu 20.04.
# It uses a newer GitHub Actions runner (ubuntu-latest) but performs the build
# inside a Docker container running Ubuntu 20.04 to ensure compatibility.
name: Build systemd-zram-generator .deb (Ubuntu 20.04 Target)

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  build_deb:
    name: Build .deb for Ubuntu 20.04 Target
    runs-on: ubuntu-latest # Use the latest supported Ubuntu runner

    container:
      image: ubuntu:20.04 # Run all steps inside an Ubuntu 20.04 Docker container
      options: --user root # Ensure commands run as root inside the container

    steps:
      # Step 1: Checkout YOUR workflow repository (where this workflow file lives)
      # This is automatically done by actions/checkout@v4 at the root of the workspace.
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
        # No 'path:' needed here; it checks out to the default workspace root.

      # Step 2: Download the source code from a *previous successful run* of systemd/systemd-zram-generator's CI
      # This completely bypasses direct git clone or wget for the source.
      - name: Download systemd-zram-generator Source from Previous Build
        uses: actions/github-script@v7 # Use github-script to call API for artifact download
        id: download_source
        with:
          script: |
            const { repos } = github.rest;
            const owner = 'systemd';
            const repo = 'systemd-zram-generator';
            const run_id = 9243760431; # <-- *** REPLACE THIS WITH A REAL workflow_run_id from their Actions page ***
                                    # Example: Go to https://github.com/systemd/systemd-zram-generator/actions
                                    # Pick a "CI" run, click it, and get the ID from the URL (e.g., .../runs/123456789)

            console.log(`Fetching workflow run artifacts for run_id: ${run_id}`);
            const artifacts = await repos.listWorkflowRunArtifacts({ owner, repo, run_id });

            if (!artifacts.data.artifacts || artifacts.data.artifacts.length === 0) {
              console.log('No artifacts found for this run. Trying to clone directly as fallback.');
              // FALLBACK: If no artifacts, try direct git clone as a last resort
              // This is what we tried before, but putting it here if artifacts fail.
              await exec.exec('apt update -y');
              await exec.exec('apt install -y git');
              await exec.exec('git', ['config', '--global', '--add', 'safe.directory', process.env.GITHUB_WORKSPACE]);
              await exec.exec('git', ['clone', '--depth', '1', 'https://github.com/systemd/systemd-zram-generator.git', 'systemd-zram-generator-source']);
              if (!fs.existsSync('systemd-zram-generator-source/meson.build')) {
                throw new Error('Fallback clone also failed to find meson.build');
              }
              return;
            }

            // Find an artifact that likely contains the source (e.g., named 'source-code' or 'archive')
            const sourceArtifact = artifacts.data.artifacts.find(artifact => 
              artifact.name.includes('source') || artifact.name.includes('archive') || artifact.name.includes('code')
            );

            if (!sourceArtifact) {
              console.log('No source-like artifact found. Downloading the first available artifact.');
              // If specific artifact not found, try to download the first one
              await repos.downloadArtifact({
                owner,
                repo,
                artifact_id: artifacts.data.artifacts[0].id,
                archive_format: 'zip',
              });
            } else {
              console.log(`Downloading artifact: ${sourceArtifact.name} (ID: ${sourceArtifact.id})`);
              await repos.downloadArtifact({
                owner,
                repo,
                artifact_id: sourceArtifact.id,
                archive_format: 'zip',
              });
            }

            // Extract the downloaded zip file
            await exec.exec('unzip', ['-o', '*.zip']); // Unzip the downloaded artifact
            
            // The artifact will extract into a directory. Find it and move contents.
            const extractedDirs = fs.readdirSync('.');
            const sourceDirName = extractedDirs.find(dir => dir.startsWith('systemd-zram-generator-'));
            if (!sourceDirName) {
              throw new Error('Could not find extracted source directory from artifact.');
            }
            await exec.exec('mv', [`${sourceDirName}/*`, 'systemd-zram-generator-source/']);
            await exec.exec('rm', ['-rf', sourceDirName]); // Clean up temporary extracted dir

            // Verify
            if (!fs.existsSync('systemd-zram-generator-source/meson.build')) {
              throw new Error('meson.build not found in systemd-zram-generator-source after artifact download!');
            }
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ github.workspace }} # Perform operations from workspace root

      - name: Install Remaining Build Dependencies (Non-interactive)
        # This step now operates within the newly populated 'systemd-zram-generator-source' directory.
        working-directory: ./systemd-zram-generator-source
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export TZ="Etc/UTC"

          apt update -y
          # actions/checkout handled git. Install other build tools.
          apt install -y tzdata build-essential meson ninja-build pkg-config libsystemd-dev debhelper devscripts
          
          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

          apt clean
          rm -rf /var/lib/apt/lists/*

      - name: Debug:List Contents of systemd-zram-generator-source
        working-directory: ./systemd-zram-generator-source
        run: |
          echo "Current working directory (pwd): $(pwd)"
          echo "Contents of ./systemd-zram-generator-source (FINAL CHECK):"
          ls -lF
          echo "Full recursive listing:"
          ls -lR . 

      - name: Configure and Build Project
        working-directory: ./systemd-zram-generator-source
        run: |
          echo "Current working directory for Meson setup: $(pwd)"
          if [ ! -f "meson.build" ]; then
            echo "ERROR: meson.build is still missing! This should not happen. Fatal error. Listing current directory contents:"
            ls -lF .
            exit 1
          fi
          meson setup . build --prefix=/usr
          ninja -C build

      - name: Create Debian Package
        working-directory: ./systemd-zram-generator-source
        run: |
          dch --create --package systemd-zram-generator --newversion 1.0.0-${GITHUB_RUN_NUMBER} "GitHub Actions build for Ubuntu 20.04."
          dpkg-buildpackage -b -us -uc

      - name: Find .deb package
        id: find_deb
        run: |
          DEB_FILE=$(find /__w/${{ github.repository }}/ -maxdepth 2 -name "systemd-zram-generator_*.deb" -print -quit)
          if [ -z "$DEB_FILE" ]; then
            echo "Error: .deb file not found in root workspace! Trying source dir as fallback."
            DEB_FILE=$(find /__w/${{ github.repository }}/systemd-zram-generator-source/ -name "systemd-zram-generator_*.deb" -print -quit)
            if [ -z "$DEB_FILE" ]; then
              echo "Error: .deb file not found anywhere!"
              exit 1
            fi
            echo "Found .deb in source subdirectory (recovered)."
          else
            echo "Found .deb in root workspace (expected)."
          fi
          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT

      - name: Upload Debian Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: systemd-zram-generator-ubuntu2004-deb
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
