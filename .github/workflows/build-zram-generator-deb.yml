# .github/workflows/build-zram-generator-deb.yml
# This workflow compiles the upstream systemd-zram-generator C project
# and packages it into a .deb file specifically for Ubuntu 20.04.
# It uses a newer GitHub Actions runner (ubuntu-latest) but performs the build
# inside a Docker container running Ubuntu 20.04 to ensure compatibility.
name: Build systemd-zram-generator .deb (Ubuntu 20.04 Target)

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  build_deb:
    name: Build .deb for Ubuntu 20.04 Target
    runs-on: ubuntu-latest # Use the latest supported Ubuntu runner

    container:
      image: ubuntu:20.04 # Run all steps inside an Ubuntu 20.04 Docker container
      options: --user root # Ensure commands run as root inside the container

    steps:
      # Step 1: Checkout YOUR repository (where this workflow file lives)
      # This is automatically done by actions/checkout@v4 at the root of the workspace
      - name: Checkout your repository (workflow container)
        uses: actions/checkout@v4
        with:
          # This implicitly checks out the repo where the workflow lives
          # into the root of the GITHUB_WORKSPACE (e.g., /__w/user/repo/user/repo)
          # We don't need 'path:' here because it's the primary checkout.
          # If this workflow is in a separate repo that's NOT a fork of systemd/zram-generator,
          # this checkout is still needed to get the workflow file itself.
          # We will then clone the actual zram-generator source into a *different* directory.
          path: main-repo-checkout # This will be where your .github/workflows lives

      # Step 2: Explicitly clone the systemd/zram-generator C source
      - name: Clone systemd-zram-generator C source
        run: |
          git clone https://github.com/systemd/zram-generator.git zram-generator-source
        working-directory: ${{ github.workspace }} # Clone into the root of the workspace

      - name: Install Build Dependencies inside Ubuntu 20.04 Container (Non-interactive)
        working-directory: ./zram-generator-source # Now this working directory should contain the C source
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export TZ="Etc/UTC"

          apt update -y
          apt install -y tzdata build-essential git meson ninja-build pkg-config libsystemd-dev debhelper devscripts
          
          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

          apt clean
          rm -rf /var/lib/apt/lists/*

      - name: Debug:List Workspace Contents Before Build
        working-directory: ./zram-generator-source # This should now list the C project files
        run: |
          echo "Current working directory (pwd): $(pwd)"
          echo "Contents of current working directory (./zram-generator-source):"
          ls -lF
          echo "Contents of parent directory (root workspace):"
          ls -lF ../
          echo "Full recursive listing of zram-generator-source:"
          ls -lR . 

      - name: Configure and Build Project
        working-directory: ./zram-generator-source # This should now contain meson.build
        run: |
          echo "Current working directory for Meson setup: $(pwd)"
          if [ ! -f "meson.build" ]; then
            echo "ERROR: meson.build still not found in $(pwd)! Critical failure."
            ls -lF . # Re-list if it somehow still fails
            exit 1
          fi
          meson setup . build --prefix=/usr # Explicitly tell meson source is '.'
          ninja -C build

      - name: Create Debian Package
        working-directory: ./zram-generator-source
        run: |
          dch --create --package systemd-zram-generator --newversion 1.0.0-${GITHUB_RUN_NUMBER} "GitHub Actions build for Ubuntu 20.04."
          dpkg-buildpackage -b -us -uc

      - name: Find .deb package
        id: find_deb
        run: |
          # The .deb is created in the parent of dpkg-buildpackage's working-directory.
          # Since working-directory is 'zram-generator-source', the .deb is in the root workspace.
          # The root of the workspace inside container is /__w/<org>/<repo>/
          DEB_FILE=$(find /__w/${{ github.repository }}/ -maxdepth 2 -name "systemd-zram-generator_*.deb" -print -quit)
          if [ -z "$DEB_FILE" ]; then
            echo "Error: .deb file not found in expected root path!"
            # Fallback (though it should be in the root if the build succeeds as expected)
            DEB_FILE=$(find /__w/${{ github.repository }}/zram-generator-source/ -name "systemd-zram-generator_*.deb" -print -quit)
            if [ -z "$DEB_FILE" ]; then
              echo "Error: .deb file not found anywhere!"
              exit 1
            fi
            echo "Found .deb in zram-generator-source subdirectory (unexpected but recovered)."
          else
            echo "Found .deb in root workspace (expected)."
          fi
          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT

      - name: Upload Debian Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: systemd-zram-generator-ubuntu2004-deb
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
