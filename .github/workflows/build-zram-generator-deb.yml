# .github/workflows/build-zram-generator-deb.yml
# This workflow compiles the upstream systemd-zram-generator C project
# and packages it into a .deb file specifically for Ubuntu 20.04.
# It uses a newer GitHub Actions runner (ubuntu-latest) but performs the build
# inside a Docker container running Ubuntu 20.04 to ensure compatibility.
name: Build systemd-zram-generator .deb (Ubuntu 20.04 Target)

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  build_deb:
    name: Build .deb for Ubuntu 20.04 Target
    runs-on: ubuntu-latest # Use the latest supported Ubuntu runner

    container:
      image: ubuntu:20.04 # Run all steps inside an Ubuntu 20.04 Docker container
      options: --user root # Ensure commands run as root inside the container

    steps:
      # Step 1: Checkout YOUR workflow repository (where this workflow file lives)
      # This is automatically done by actions/checkout@v4 at the root of the workspace.
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
        # No 'path:' needed here, it goes to the default workspace root.

      # Step 2: Clone the systemd/systemd-zram-generator C source using actions/checkout
      # This action is designed for robust, authenticated cloning.
      - name: Clone Canonical systemd-zram-generator C source
        uses: actions/checkout@v4
        with:
          repository: systemd/systemd-zram-generator # The correct upstream repository
          path: systemd-zram-generator-source        # Clone into this subdirectory
          token: ${{ secrets.GITHUB_TOKEN }}         # Use the built-in token for authentication

      - name: Install Remaining Build Dependencies (Non-interactive)
        # These dependencies are for the zram-generator project itself.
        # This step now operates within the newly cloned 'systemd-zram-generator-source' directory.
        working-directory: ./systemd-zram-generator-source
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export TZ="Etc/UTC" # Set default timezone to prevent interactive prompts

          apt update -y
          # Git is implicitly handled by actions/checkout. Install other build tools.
          apt install -y tzdata build-essential meson ninja-build pkg-config libsystemd-dev debhelper devscripts
          
          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata

          apt clean
          rm -rf /var/lib/apt/lists/*

      - name: Debug:List Contents of systemd-zram-generator-source
        working-directory: ./systemd-zram-generator-source # Verify files are here
        run: |
          echo "Current working directory (pwd): $(pwd)"
          echo "Contents of ./systemd-zram-generator-source:"
          ls -lF
          echo "Full recursive listing:"
          ls -lR . 

      - name: Configure and Build Project
        working-directory: ./systemd-zram-generator-source # Meson should find meson.build here
        run: |
          echo "Current working directory for Meson setup: $(pwd)"
          if [ ! -f "meson.build" ]; then
            echo "ERROR: meson.build is still missing! This should not happen. Fatal error. Listing current directory contents:"
            ls -lF .
            exit 1
          fi
          meson setup . build --prefix=/usr # Explicitly tell meson source is '.' and build dir is 'build'
          ninja -C build

      - name: Create Debian Package
        working-directory: ./systemd-zram-generator-source # dpkg-buildpackage operates here
        run: |
          dch --create --package systemd-zram-generator --newversion 1.0.0-${GITHUB_RUN_NUMBER} "GitHub Actions build for Ubuntu 20.04."
          dpkg-buildpackage -b -us -uc

      - name: Find .deb package
        id: find_deb
        run: |
          # The .deb package is created in the parent directory of where dpkg-buildpackage was invoked.
          # Since working-directory for Create Debian Package is './systemd-zram-generator-source',
          # the .deb will be in the root of the runner's workspace.
          # The workspace root inside container is typically /__w/<org>/<repo>/
          DEB_FILE=$(find /__w/${{ github.repository }}/ -maxdepth 2 -name "systemd-zram-generator_*.deb" -print -quit)
          if [ -z "$DEB_FILE" ]; then
            echo "Error: .deb file not found in root workspace! Trying source dir as fallback."
            DEB_FILE=$(find /__w/${{ github.repository }}/systemd-zram-generator-source/ -name "systemd-zram-generator_*.deb" -print -quit)
            if [ -z "$DEB_FILE" ]; then
              echo "Error: .deb file not found anywhere!"
              exit 1
            fi
            echo "Found .deb in source subdirectory (recovered)."
          else
            echo "Found .deb in root workspace (expected)."
          fi
          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT

      - name: Upload Debian Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: systemd-zram-generator-ubuntu2004-deb
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
